name: Build Docker

on:
  schedule:
    - cron: "0 0 * * *"
  repository_dispatch:
  workflow_dispatch:
    inputs:
      path_dockerfile:
        description: "dockerfile path in repo"
        required: true
        default: "Dockerfile.dev"
        type: string
      package_app:
        description: "Input package"
        required: true
        default: "baidunetdisk"
        type: string
      arch_branch:
        description: "Input arch"
        required: true
        default: "linux/amd64,linux/arm64"
        type: string
      dockerhub_repo:
        description: "Docker Hub repository"
        required: true
        default: "grinch27/baidunetdisk"
        type: string
      tag:
        description: "tag"
        required: true
        default: "dev"
        type: string
      version:
        description: "version"
        required: false
        default: "4.17.7"
        type: string

env:
  TZ: UTC
  path_dockerfile: ${{ inputs.path_dockerfile || 'Dockerfile' }}
  package_app: ${{ inputs.package_app || 'baidunetdisk' }}
  arch_branch: ${{ inputs.arch_branch || 'linux/amd64,linux/arm64' }}
  dockerhub_repo: ${{ inputs.dockerhub_repo || 'grinch27/baidunetdisk' }}
  tag: ${{ inputs.tag || 'latest' }}
  version: ${{ inputs.version }}

jobs:
  build:
    name: Build Docker
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout DIY
        uses: actions/checkout@main

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: ${{ env.arch_branch }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master

      - name: Log in to Docker Hub
        uses: docker/login-action@master
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get package version
        id: ver
        working-directory: /
        env:
          PACKAGE_SOURCE_URL: "https://pkg-ant.baidu.com/"
        run: |
          echo -e "Current working directory: $(pwd)"

          if [ -z "${{ env.version }}" ]; then
            # 定义正则表达式
            regex_chunk_common='https://nd-static.bdstatic.com/m-static/wp-brand/js/chunk-common.[^/]+?\.js'
            regex_linux_guanjia='https://issuepcdn.baidupcs.com/issue/netdisk/LinuxGuanjia/.[^/]+?/.[^/]+?\.deb'
            regex_version='baidunetdisk_\K[^_]+(?=_amd64.deb)'

            # 第1步：请求网址，搜寻 chunk-common
            chunk_common_url=$(curl -s ${{ env.PACKAGE_SOURCE_URL }} | grep -oP $regex_chunk_common | head -n 1)
            if [ -z "$chunk_common_url" ]; then
              echo "Chunk common URL not found"
              exit 1
            fi
            echo "Chunk common URL: $chunk_common_url"

            # 第2步：请求找到的 chunk-common，搜寻 baidunetdisk
            url_baidunetdisk=$(curl -s $chunk_common_url | grep -oP $regex_linux_guanjia | head -n 1)
            if [ -z "$url_baidunetdisk" ]; then
              echo "Linux Guanjia URL not found"
              exit 1
            fi
            echo "baidunetdisk URL: $url_baidunetdisk"
            echo "url=$url_baidunetdisk" >> ${GITHUB_OUTPUT}

            # 第3步：从 baidunetdisk URL 中提取版本号
            version=$(echo $url_baidunetdisk | grep -oP $regex_version)
            echo "version: $version"
            echo "version=$version" >> ${GITHUB_OUTPUT}

          else
            echo "version=${{ env.version }}" >> ${GITHUB_OUTPUT}
          fi

          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@master
        with:
          images: ${{ env.dockerhub_repo }}
          tags: |
            type=raw,value=${{ env.tag }},enabled=true
            # type=raw,value=${{ steps.ver.outputs.version }},enabled=true
          flavor: latest=false

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@master
        with:
          context: .
          file: ${{ github.workspace }}/${{ env.path_dockerfile }}
          no-cache: false
          platforms: ${{ env.arch_branch }}
          load: false
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            APP_VER=${{ steps.ver.outputs.version }}

  test:
    name: Test Docker
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@master
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Test Docker image
        id: test
        env:
          image: ${{ env.dockerhub_repo }}:${{ env.tag }}
          container_name: ${{ env.package_app }}
        run: |
          # Run Docker container
          docker run --name ${{ env.container_name }} --rm -d -p 6080:6080 ${{ env.image }} sleep infinity

          # Test noVNC
          docker exec ${{ env.container_name }} curl localhost:6080

          # Stop Docker container
          docker stop ${{ env.container_name }}

          # Remove Docker image
          docker rmi ${{ env.image }}

          echo "status=success" >> ${GITHUB_OUTPUT}
